import 'image.dart';
import 'dart:io';
import 'static_matrix.dart';

/// HEX color class
class Color {
  final int red;
  final int green;
  final int blue;

  Color(this.red, this.green, this.blue) {
    if (red > 255 || green > 255 || blue > 255) {
      throw Exception("Invalid color value (>255)");
    }
  }

  factory Color.fromHEX(String hex) {
    // Check if string contains '#'
    if (hex.contains('#', 1) || // Contains # after first position
        (hex.contains('#') &&
            hex.length != 7) || // Contains # but length is invalid
        (!hex.contains('#') && hex.length != 6)) {
      // Lenght is invalid
      throw Exception("Invalid hex value");
    }

    // Remove trailing #
    if (hex.contains('#')) hex = hex.substring(1);

    // Parse values
    try {
      return Color(
          int.parse(hex.substring(0, 2), radix: 16),
          int.parse(hex.substring(2, 4), radix: 16),
          int.parse(hex.substring(4, 6), radix: 16));
    } catch (e) {
      throw Exception("Invalid hex value");
    }
  }

  factory Color.black() => Color(0, 0, 0);
  factory Color.white() => Color(255, 255, 255);

  /// Print color as 'R G B'
  @override
  String toString() => '$red $green $blue';
}

class ImageColor extends Image<Color> {
  ImageColor({required int width, required int height})
      : super(
            height: height,
            width: width,
            maxValue: 255,
            defaultValue: Color.black());

  /// Create a mono image from a matrix
  ImageColor.fromMatrix(StaticMatrix<Color> matrix)
      : super.allParameters(maxValue: 1, pixels: matrix);

  @override
  void toFile(String baseName) {
    // Open file
    var file = File(baseName + '.pgm').openWrite();

    // Write file type
    file.write('P3\n');
    // Write commentary
    file.write('# File generated by NETPBM Dart library by @taleroangel\n');
    file.write('# visit: https://github.com/taleroangel/dart_netpbm\n');
    // Write size
    file.write('$width $height $maxValue\n');

    for (int i = 0; i < height; i++) {
      for (int j = 0; j < width; j++) {
        file.write('${pixels[i][j].toString()} ');
      }
      file.write('\n');
    }

    // Close file
    file.close();
  }
}
